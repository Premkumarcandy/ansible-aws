### Creates VPC

- name:               Create VPC
  ec2_vpc_net:
    name:             "{{ vpc_name }}"
    cidr_block:       "{{ vpc_cidr_block }}"
    region:           "{{ vpc_region }}"
    state:            "present"
    tags:
      project": "{{ project_name }}"
      environment": "{{ env_name }}"
  register: my_vpc

- name:               Set VPC ID in variable
  set_fact:
    vpc_id:           "{{ my_vpc.vpc.id }}"


### Creates the subnets

# Public subnet in AZ-1
- name:               Create Public Subnet [AZ-1]
  ec2_vpc_subnet:
    state:            "present"
    vpc_id:           "{{ vpc_id }}"
    cidr:             "{{ subnet1_cidr }}"
    az:               "{{ vpc_region }}b"
    region:           "{{ vpc_region }}"
    tags:
      Name:           "{{ vpc_name }}-public01"
  register: my_public_subnet_az1

- name:               Set Public Subnet ID in variable [AZ-1]
  set_fact:
    public_subnet_az1_id: "{{ my_public_subnet_az1.subnet.id }}"

# Public subnet in AZ-2
- name:               Create Public Subnet [AZ-2]
  ec2_vpc_subnet:
    state:            "present"
    vpc_id:           "{{ vpc_id }}"
    cidr:             "{{ subnet2_cidr }}"
    az:               "{{ vpc_region }}c"
    region:           "{{ vpc_region }}"
    tags:
      Name:           "{{ vpc_name }}-public02"
  register: my_public_subnet_az2

- name:               Set Public Subnet ID in variable [AZ-2]
  set_fact:
    public_subnet_az2_id: "{{ my_public_subnet_az2.subnet.id }}"


### Creates VPC Internet Gateway.

- name:               Create Internet Gateway for VPC
  ec2_vpc_igw:
    vpc_id:           "{{ vpc_id }}"
    region:           "{{ vpc_region }}"
    state:            "present"
  register: my_vpc_igw

- name:               Set Internet Gateway ID in variable
  set_fact:
    igw_id:           "{{ my_vpc_igw.gateway_id }}"


### Setup the Route Tables
# We will have one Route Table for the public subnet,
# and one for each of the private subnets.
# You can see that the Route Tables for the private subnets
# will redirect default destinations to the NAT Gateways
# and the Route Table for the public subnet will use the
# Internet Gateway.
# We can use the same Route Table for the two public subnets,
# as their configuration is identical:
# they both use the internet gateway
# to reach the outside world.
#
# We don't see it here, but the Route Tables will also contain
# a route for resources inside the VPC, so that if we need
# to reach an internal resource, we don't go to the Internet
# Gateway or the NAT Gateway.

- name: Setup public subnet route table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    region: "{{ vpc_region }}"
    tags:
      Name: "{{ vpc_name }}-Public"
    subnets:
      - "{{ public_subnet_az1_id }}"
      - "{{ public_subnet_az2_id }}"
    routes:
      - dest: "0.0.0.0/0"
        gateway_id: "{{ igw_id }}"


### Create Security Groups.

# ssh SG
- name: Create ssh Security Group
  ec2_group:
    name: "{{ vpc_name }}-sg-ssh"
    description: "Allows external SSH access"
    vpc_id: "{{ vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: "tcp"
        from_port: "22"
        to_port: "22"
        cidr_ip: "0.0.0.0/0"
  register: my_ssh_sg

- name: Set ssh SG ID
  set_fact:
    ssh_sg_id: "{{ my_ssh_sg.group_id }}"

- name: Tag Name for ssh Security Group
  ec2_tag:
    region: "{{ vpc_region }}"
    resource: "{{ ssh_sg_id }}"
    state: present
    tags:
      Name: "{{ vpc_name }}-sg-ssh"
      project": "{{ project_name }}"
      environment": "{{ env_name }}"

# frontend SG
- name: Create frontend Security Group
  ec2_group:
    name: "{{ vpc_name }}-sg-frontend"
    description: "SG for frontend instances"
    vpc_id: "{{ vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: "tcp"
        from_port: "80"
        to_port: "80"
        cidr_ip: "0.0.0.0/0"
  register: my_frontend_sg

- name: Set frontend SG ID
  set_fact:
    frontend_sg_id: "{{ my_frontend_sg.group_id }}"

- name: Tag Name for frontend Security Group
  ec2_tag:
    region: "{{ vpc_region }}"
    resource: "{{ frontend_sg_id }}"
    state: present
    tags:
      Name: "{{ vpc_name }}-sg-frontend"
      project": "{{ project_name }}"
      environment": "{{ env_name }}"

# services SG
- name: Create services Security Group
  ec2_group:
    name: "{{ vpc_name }}-sg-services"
    description: "SG for service instances"
    vpc_id: "{{ vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: "tcp"
        from_port: "8080"
        to_port: "8090"
        group_id: "{{ frontend_sg_id}}"
  register: my_services_sg

- name: Set services SG ID
  set_fact:
    services_sg_id: "{{ my_services_sg.group_id }}"

- name: Tag Name for services Security Group
  ec2_tag:
    region: "{{ vpc_region }}"
    resource: "{{ services_sg_id }}"
    state: present
    tags:
      Name: "{{ vpc_name }}-sg-services"
      project": "{{ project_name }}"
      environment": "{{ env_name }}"

# mysql SG
- name: Create mysql Security Group
  ec2_group:
    name: "{{ vpc_name }}-sg-mysql"
    description: "SG for mysql instances"
    vpc_id: "{{ vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: "tcp"
        from_port: "3306"
        to_port: "3306"
        group_id: "{{ services_sg_id}}"
  register: my_mysql_sg

- name: Set mysql SG ID
  set_fact:
    mysql_sg_id: "{{ my_mysql_sg.group_id }}"

- name: Tag Name for mysql Security Group
  ec2_tag:
    region: "{{ vpc_region }}"
    resource: "{{ mysql_sg_id }}"
    state: present
    tags:
      Name: "{{ vpc_name }}-sg-mysql"
      project": "{{ project_name }}"
      environment": "{{ env_name }}"

# rabbitmq SG
- name: Create rabbitmq Security Group
  ec2_group:
    name: "{{ vpc_name }}-sg-rabbitmq"
    description: "SG for rabbitmq instances"
    vpc_id: "{{ vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: "tcp"
        from_port: "5672"
        to_port: "5672"
        group_id: "{{ services_sg_id}}"
  register: my_rabbitmq_sg

- name: Set rabbitmq SG ID
  set_fact:
    rabbitmq_sg_id: "{{ my_rabbitmq_sg.group_id }}"

- name: Tag Name for rabbitmq Security Group
  ec2_tag:
    region: "{{ vpc_region }}"
    resource: "{{ rabbitmq_sg_id }}"
    state: present
    tags:
      Name: "{{ vpc_name }}-sg-rabbitmq"
      project": "{{ project_name }}"
      environment": "{{ env_name }}"
